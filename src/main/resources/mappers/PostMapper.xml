<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.portfolio.community.contents.query.PostMapper">


    <resultMap id="PostWithResources" type="com.portfolio.community.contents.query.PostDetailVO">
        <id property="postId" column="post_id"/>
        <result property="dislikeCount" column="dislike_count"/>
        <result property="likeCount" column="like_count"/>
        <result property="isPremium" column="is_premium"/>
        <result property="updatedAt" column="updated_at"/>
        <result property="viewCount" column="view_count"/>
        <result property="title" column="title"/>
        <result property="content"  column="content"/>
        <result property="categoryId" column="category_id"/>
        <result property="categoryName" column="category_name"/>
        <result property="authorName" column="author_name"/>
        <result property="status" column="status"/>
    <collection property="attachments" ofType="com.portfolio.community.contents.query.AttachmentSummaryVO">
        <id property="resourceId" column="resource_id" />
        <result property="url" column="url"/>
        <result property="resourceType" column="resource_type"/>
        <result property="fileName" column="file_name"/>
    </collection>
</resultMap>

    <select id="getPostWithResources" resultMap="PostWithResources" parameterType="long">
        select p.post_id,
               p.dislike_count,
               p.like_count,
               p.is_premium,
               p.updated_at,
               p.created_at,
               p.view_count,
               p.title,
               p.content,
               p.author_name,
               p.status,
               c.name as category_name,
               r.url,
               r.resource_type,
               r.file_name
        from post p
                 inner join category c on p.category_id=c.category_id
                 left join post_resource pr  on p.post_id =pr.post_id
                 left join resource r on r.resource_id = pr.resource_id and r.state in ('ACTIVE')
            where p.status in ('PUBLISHED','EDITED','HOT')
          and p.post_id=#{postId}
    </select>


    <select id="getPostList" resultType="com.portfolio.community.contents.query.PostSummaryVO" >
        select p.post_id,
               p.is_premium,
               p.updated_at,
               p.like_count,
               p.view_count,
               p.title,
               p.category_id,
               p.author_name,
               c.name as category_name
        from post p join category c on p.category_id =c.category_id
        where p.status in ('PUBLISHED','EDITED','HOT')
        order by p.created_at desc;
    </select>

    <select id="getPostListByCategoryId" resultType="com.portfolio.community.contents.query.PostSummaryVO" >
        select p.post_id,
            p.is_premium,
            p.updated_at,
            p.like_count,
            p.view_count,
            p.title,
            p.category_id,
            p.author_name,
            c.name as category_name
        from post p join category c on p.category_id =c.category_id
        where p.status in ('PUBLISHED','EDITED','HOT')
        and p.category_id=#{categoryId}
        <choose>
            <when test="sortField != null and sortDirection != null">
                order by p.${sortField} ${sortDirection}
            </when>
            <otherwise>
                order by p.created_at desc
            </otherwise>
        </choose>
        limit #{offset}, #{pageSize};
    </select>


    <select id="countPostsByCategoryId" resultType="long">
        SELECT COUNT(*) FROM post WHERE category_id = #{categoryId}
                                    AND status IN ('PUBLISHED','EDITED','HOT')
    </select>


</mapper>